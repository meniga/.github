name: Complex Automerge

env:
  PYTHON_SCRIPT: "scripts/find-next-target-branch.py"

on:
  workflow_call:
    inputs:
      major-version:
        required: true
        type: string
      main-branch:
        required: true
        type: string
      ignore-targets:
        required: false
        type: string  
    secrets:
      github-token:
        required: true

jobs:
  complex-automerge:
    name: Try to merge, fallback to PR
 
    runs-on: ubuntu-latest
 
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
 
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9.5'
 
    # The source branch is the branch that triggered the workflow
    - name: Set source branch
      id: source
      run: |
        source_branch=${GITHUB_REF/refs\/heads\//}
        echo "::debug::Using source branch -> $source_branch"
        echo "::set-output name=branch::$source_branch"
 
    # The target branch is either the next release branch with a higher
    # minor version or the "master" branch
    - name: Determine target branch
      id: target
      run: |
        source_branch="${{ steps.source.outputs.branch }}"
        main_branch="${{ inputs.main-branch }}"
        
        if [[ "$source_branch" == "$main_branch" ]]; then
            echo "::set-output name=branch::develop"
            exit 0
        fi
 
        # Retrieve all remote release branches with the same major version
        release_branches=$(\
          git branch -r --list "origin/release/${{ inputs.major-version }}.*" \
        )
 
        # Remove the origin/ part of the branch name
        release_branches=${release_branches// ?origin\//}
 
        # Replace newlines with spaces
        release_branches=${release_branches//$'\n'/ }
 
        # Add the main branch to the list of target branches
        target_branches="$release_branches $main_branch"
 
        echo "::debug::Calling Python script with arguments"
        echo "::debug::--branches $target_branches"
        echo "::debug::--ignore ${{ inputs.ignore-targets }}"
        echo "::debug::--main $main_branch"
        echo "::debug::--source $source_branch"
 
        # Executes a Python script that will determine the next target branch
        target_branch=$(\
          python ${{ env.PYTHON_SCRIPT }} \
          --branches $target_branches \
          --ignore ${{ inputs.ignore-targets }} \
          --main $main_branch \
          --source $source_branch \
        )
 
        echo "::debug::Target branch -> $target_branch"
        echo "::set-output name=branch::$target_branch"

    # Try to merge
    - name: Merge branches
      uses: devmasx/merge-branch@v1.3.1
      if: steps.target.outputs.branch != ''
      with:
        github_token: ${{ secrets.AUTOMERGE_PAT }}
        target_branch: ${{ steps.target.outputs.branch }}
        type: now

    # Fallback to creating a pull request
    - name: Create pull request
      uses: repo-sync/pull-request@v2.5
      if: (failure() && steps.target.outputs.branch != '')
      with:
        destination_branch: ${{ steps.target.outputs.branch }}
        github_token: ${{ secrets.github-token }}
        pr_title: |
          Auto PR from ${{ steps.source.outputs.branch }}
          to ${{ steps.target.outputs.branch }}
        pr_body: >
          :crown: This pull request was created automatically because there
          are changes in the *${{ steps.source.outputs.branch }}* branch that
          need to be merged with the *${{ steps.target.outputs.branch }}* branch
        pr_reviewer: ""
        pr_assignee: ""
        pr_label: "auto-pr"

    ## Print the URL of the pull request
    - name: output-url
      if: (failure() && steps.target.outputs.branch != '')
      run: echo "Pull Request URL -> ${{ steps.open-pr.outputs.pr_url }}"
