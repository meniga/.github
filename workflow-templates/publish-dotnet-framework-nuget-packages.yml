## This workflow publishes .NET Framework NuGet packages
## to the Meniga GitHub Package registry
##
## Make sure to adjust the workflow as needed.
## Depending on your project name, file structure, etc.
## Replace all values enclosed in <>

name: Publish to GitHub Packages (.NET Framework)

env:
  ## Example: src/SampleService.sln
  SOLUTION_FILE: <solution-file>
  ## Example: ("src\Meniga.Runtime.Contracts\Meniga.Runtime.Contracts.csproj","src\Meniga.Runtime.Wcf\Meniga.Runtime.Wcf.csproj")
  PROJECT_LIST: <project-list> # List of projects to package

on:
  push:
    ## Adjust if needed
    branches: ['$default-branch']

    paths-ignore:
    - '.github/**'
    - '!.github/workflows/publish-dotnet-framework-nuget-packages.yml'
    - 'docs/**'
    - '*.md'

  ## Manual trigger
  workflow_dispatch:

jobs:
  package-push:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    ## If you enable caching for the "NuGet Restore" step then it is important
    ## that the nuget-version matches the NuGet version used when the committed
    ## lock files were generated. Different NuGet versions can generate
    ## different hashes for the same package.
    - name: Setup NuGet
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: 'latest'

    ## Update the credentials for the github package source
    - name: Add Meniga NuGet Source
      run: |
        nuget sources update `
        -Name "github" `
        -Username "meniga" `
        -Password "${{ secrets.MENIGA_NUGET_PASSWORD }}"

    ## Caching requires the use of NuGet package lock files and is therefore
    ## disabled by default.
    ## Read about Lock Files: http://blog.ctaggart.com/2019/03/using-nuget-lock-file-for-reproducible.html
    ##
    ## Uncomment to enable and also the if statement in the "NuGet Restore" step
    # - name: Cache NuGet Restore
    #   uses: actions/cache@v2
    #   id: cache
    #   with:
    #     path: ~/.nuget/packages
    #     key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

    - name: NuGet Restore
      # if: steps.cache.outputs.cache-hit != 'true'
      run: nuget restore ${{ env.SOLUTION_FILE }}

    - name: MSBuild
      run: |
        msbuild `
        /t:restore,build `
        /v:q /nologo `
        /P:Configuration=Release ${{ env.SOLUTION_FILE }} `
        /p:RestoreLockedMode=true `
        /p:VisualStudioVersion=14.0 `
        '/p:AllowedReferenceRelatedFileExtensions=".pdb;.xml;.pri"'

    - name: NuGet Package
      run: |
        $packageVersion = gitversion /showvariable nuGetVersion
        echo "Using package version: $packageVersion"

        foreach($proj in ${{ env.PROJECT_LIST }})
        {
          echo "Packaging project: $proj"
          nuget pack $proj `
          -Version "$packageVersion" `
          -Verbosity "detailed" `
          -OutputDirectory "./out" `
          -Properties "Configuration=Release;DependencyVersion=$packageVersion"
        }

    ## List the packages being pushed
    - name: List Output Directory
      run: ls ./out

    ## Push all the packages in the ./out directory
    - name: NuGet Push
      run: |
        nuget push ./out/*.nupkg `
        -ApiKey "${{ secrets.GITHUB_TOKEN }}" `
        -Source "github"
